buildscript {
    ext {
        lombokVersion = "1.18.20"
        spockVersion = "2.2-groovy-3.0"
        springBootVersion = "3.1.1"
        fasterVersion = "2.14.3"
        groovyVersion = "3.0.13"
        guavaVersion = "31.1-jre"
        junitVersion = "4.13.2"
        slf4jVersion = "1.7.29"
    }
}

plugins {
    id 'groovy'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${fasterVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterVersion}"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "junit:junit:${junitVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'pl.futurecollarc.invoicing.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.7
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.7
            }
        }
    }
}
