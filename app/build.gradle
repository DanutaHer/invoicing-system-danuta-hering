buildscript {
    ext {
        flywaydbVersion = "8.2.2"
        h2databaseVersnion = "2.2.220"
        jacksonCoreVersion = "2.12.7.1"
        jacksonDatatypeVersion = "2.12.1"
        lombokVersion = "1.18.26"
        mongoVersion = "3.12.10"
        postgresqlVersion = "42.2.27"
        spockVersion = "2.3-groovy-3.0"
        springBootVersion = "2.7.7"
        springDependencyManagmentVersion = "1.1.2"
        springFoxStarterVersion = "3.0.0"
        springFoxUiVersion = "3.0.0"
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'groovy'
    id 'io.spring.dependency-management' version "${springDependencyManagmentVersion}"
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core:${flywaydbVersion}"
    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeVersion}"
    implementation "com.h2database:h2:${h2databaseVersnion}"
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation "com.h2database:h2:${h2databaseVersnion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'pl.futurecollars.invoicing.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

check {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn check
}

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.9
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/App.class', 'pl/futurecollars/invoicing/db/DatabaseConfiguration.class'])
        }))
    }
}

task testWithFileDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'file'
    useJUnitPlatform()
}

task testWithMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'memory'
    useJUnitPlatform()
}

task testWithSqlDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'sql'
    useJUnitPlatform()
}

task testWithJpaDatabase (type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
    useJUnitPlatform()
}

task testWithJpaFlywayDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa-flyway'
    useJUnitPlatform()
}

task testWithMongoDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
    useJUnitPlatform()
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabase